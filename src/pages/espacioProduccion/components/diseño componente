import React, { useState, useEffect } from 'react';

import { FaCheckCircle } from 'react-icons/fa';
import MonitoreoService from '../../../services/monitoreo';
import TipoEspacioService from '../../../services/tipoEspacio';
import SpeciesService from '../../../services/SpeciesService';
import { MenuItem, FormControl, Select, InputLabel, Checkbox, ListItemText } from '@mui/material';

const CrearEspacio = () => {

  const [showSubspaceField, setShowSubspaceField] = useState(false);
  const [disableSpecies, setDisableSpecies] = useState(false);
  const [subspaces, setSubspaces] = useState([]);
  const [expandedSubspace, setExpandedSubspace] = useState(null);
  const [subspaceCount, setSubspaceCount] = useState(1); // Controla la cantidad de subespacios
  const [isYesSelected, setIsYesSelected] = useState(false);
  const [field1, setField1] = useState('');
  const [field2, setField2] = useState('');

  const [step, setStep] = useState(0);

  const handleNextStep = () => {
    if (step < 2) setStep((prev) => prev + 1);
  };

  const handlePrevStep = () => {
    if (step > 0) setStep((prev) => prev - 1);
  };
  
  const [monitoreo, setMonitoreo] = useState([]);
  const [tipoEspacio, setTipoEspacio] = useState([]);
  const [species, setTipoEspecies] = useState([]);
  const [formData, setFormData] = useState({
    name: '',
    gpsPosition: '',
    monitoringSystemId: '',
    spaceTypeId: '',
    climateConditions: '',
    dimensionUnit: '',
    shape: '',
    length: '',
    width: '',
    depth: '',
    area: '',
    volume: '',
    specificFeatures: '',
    species: [],
    productionSpaceType: '',
    subProductionSpaces: [],
    assignDevices: [
      { deviceType: '', sensorId: null, actuatorId: null }
    ],
    configureMeasurementControls: [
      {
        measurementType: '',
        sensorId: null,
        actuatorId: null,
        samplingTimeUnit: '',
        samplingFrequency: '',
        numberOfSamples: '',
        controlType: '',
        actuationTimeUnit: '',
        activationParameterRange: '',
        activationFrequency: '',
        alertMessage: '',
        productionParameterId: null
      }
    ]
  });

  useEffect(() => {
    const fetchMonitoreo = async () => {
      try {
        const data = await MonitoreoService.getAllMonitories();
        setMonitoreo(data);
      } catch (error) {
        console.error('Error fetching monitoreo:', error);
      }
    };
    fetchMonitoreo();
  }, []);

  useEffect(() => {
    const fetchEspecies = async () => {
      try {
        const data = await SpeciesService.getAllSpecie();
        setTipoEspecies(data);
        console.log('species', data);
      } catch (error) {
        console.error('Error fetching species:', error);
      }
    };
    fetchEspecies();
  }, []);

  useEffect(() => {
    const fetchTipoEspacio = async () => {
      try {
        const data = await TipoEspacioService.getAlltipoEspacio(42);
        setTipoEspacio(data);
        console.log('tipos', data);
      } catch (error) {
        console.error('Error fetching tipoEspacio:', error);
      }
    };
    fetchTipoEspacio();
  }, []);

  const handleChangeCategory = (event) => {
    const { value } = event.target;
    setFormData((prevState) => ({
      ...prevState,
      species: value,
    }));
  };

  const handleAddSubspaceClick = () => {
    const newSubspaces = [];

    // Crea el número de subespacios especificado
    for (let i = 0; i < subspaceCount; i++) {
      newSubspaces.push({
        id: Date.now() + i, // Genera un id único para cada subespacio
        name: '',
        description: '',
      });
    }

    setSubspaces([...subspaces, ...newSubspaces]);
    setShowSubspaceField(true);
    setShowSubspaceField(true);

  };


  const handleExpandSubspace = (id) => {
    setExpandedSubspace(expandedSubspace === id ? null : id);
  };

  const handleRemoveSubspace = (id) => {
    const updatedSubspaces = subspaces.filter((sub) => sub.id !== id);
    setSubspaces(updatedSubspaces);
    if (updatedSubspaces.length === 0) {
      setDisableSpecies(false);
    }
  };

  const handleInputChange = (id, field, value) => {
    setSubspaces((prevSubspaces) =>
      prevSubspaces.map((sub) =>
        sub.id === id ? { ...sub, [field]: value } : sub
      )
    );
  };
  const handleYesCheckboxChange = () => {
    setIsYesSelected(true); // Si se selecciona "Sí", activa el campo y desactiva "No"
  };
  
  const handleNoCheckboxChange = () => {
    setIsYesSelected(false); // Si se selecciona "No", desactiva el campo y activa "Sí"
  };

  return (
    <form className="p-6">
      <div className="container mx-auto p-8">
        <div className="bg-white rounded-lg shadow-xl p-6">
          <h2 className="text-2xl font-semibold mb-6">Crear Lista de Especies</h2>

          {/* Steps Header */}
          <div className="flex flex-col mb-6">
            <div className="flex items-center justify-between mb-2">
              <div className={`${step === 0 ? 'text-black font-bold' : 'text-gray-500'} flex items-center`}>
                1. Creación de Parámetros de Producción
                {step > 0 && <FaCheckCircle className="text-[#168C0DFF] ml-2" />}
              </div>
              <div className={`${step === 1 ? 'text-black font-bold' : 'text-gray-500'} flex items-center`}>
                2. Parámetros por Etapa
                {step > 1 && <FaCheckCircle className="text-[#168C0DFF] ml-2" />}
              </div>
              <div className={`${step === 2 ? 'text-black font-bold' : 'text-gray-500'}`}>
                3. Revisión y Confirmación
              </div>
            </div>

            {/* Steps Progress Bar */}
            <div className="flex items-center mb-6">
              <div className="flex-grow h-1 bg-gray-300 relative">
                <div
                  className={`h-1 bg-[#168C0DFF]`}
                  style={{ width: `${(step + 1) * (100 / 3)}%` }}
                ></div>
                <div className="absolute inset-0 flex justify-between">
                  {[...Array(3)].map((_, index) => (
                    <div
                      key={index}
                      className={`w-1 h-1 bg-white rounded-full border ${
                        step >= index ? 'border-[#168C0DFF]' : 'border-gray-300'
                      }`}
                    ></div>
                  ))}
                </div>
              </div>
            </div>
          </div>

          {/* Step Content */}
          <div className="space-y-6">
            {step === 0 && (
              <div className="grid grid-cols-2 gap-4">
                <div >
              <label htmlFor="scientificName" className="block text-sm font-medium text-gray-700 mb-1">
                Nombre espacio
              </label>
              <input
                type="text"
                id="scientificName"
                name="scientificName"
                placeholder="Nombre espacio"
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-[#168C0DFF] focus:border-[#168C0DFF]"
              />
            </div>
            <div >
              <label htmlFor="scientificName" className="block text-sm font-medium text-gray-700 mb-1">
                posición GPS
              </label>
              <input
                type="text"
                id="scientificName"
                name="scientificName"
                placeholder="posición GPS"
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-[#168C0DFF] focus:border-[#168C0DFF]"
              />
            </div>
            <div>
              <label htmlFor="subcategory" className="block text-sm font-medium text-gray-700 mb-1">
                sist monitoreo y control
              </label>
              <select
                id="subcategory"
                name="subcategory"
              // value={formData.subcategory}
              // onChange={handleChange}
              // className={`w-full px-3 py-2 pr-10 border border-gray-300 rounded-md shadow-sm focus:ring-[#168C0DFF] focus:border-[#168C0DFF] cursor-pointer ${errors.subcategory ? 'border-red-500' : 'text-gray-500'}`}
              >
                <option value="" className="text-gray-500">Selecciona una opción</option>
                {monitoreo?.length > 0 && monitoreo.map((sub) => (
                  <option key={sub.id} value={sub.id}>
                    {sub.nombreId}
                  </option>
                ))}
              </select>
              {/* {errors.subcategory && <p className="text-red-500 text-xs mt-1">{errors.subcategory}</p>} */}
            </div>

            <div>
              <label htmlFor="subcategory" className="block text-sm font-medium text-gray-700 mb-1">
                Tipo de espacio
              </label>
              <select
                id="subcategory"
                name="subcategory"
              // value={formData.subcategory}
              // onChange={handleChange}
              // className={`w-full px-3 py-2 pr-10 border border-gray-300 rounded-md shadow-sm focus:ring-[#168C0DFF] focus:border-[#168C0DFF] cursor-pointer ${errors.subcategory ? 'border-red-500' : 'text-gray-500'}`}
              >
                <option value="" className="text-gray-500">Selecciona una opción</option>
                {tipoEspacio?.length > 0 && tipoEspacio.map((sub) => (
                  <option key={sub.id} value={sub.id}>
                    {sub.spaceTypeName}
                  </option>
                ))}
              </select>
              {/* {errors.subcategory && <p className="text-red-500 text-xs mt-1">{errors.subcategory}</p>} */}
            </div>
            <div >
              <label htmlFor="scientificName" className="block text-sm font-medium text-gray-700 mb-1">
                condiciones de clima
              </label>
              <input
                type="text"
                id="scientificName"
                name="scientificName"
                placeholder="condiciones de clima "
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-[#168C0DFF] focus:border-[#168C0DFF]"
              />
            </div>
            <div >
              <label htmlFor="scientificName" className="block text-sm font-medium text-gray-700 mb-1">
                unidad de dimensionamiento
              </label>
              <input
                type="text"
                id="scientificName"
                name="scientificName"
                placeholder="unidad de dimensionamiento"
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-[#168C0DFF] focus:border-[#168C0DFF]"
              />
            </div>
            <div >
              <label htmlFor="scientificName" className="block text-sm font-medium text-gray-700 mb-1">
                forma
              </label>
              <input
                type="text"
                id="scientificName"
                name="scientificName"
                placeholder="forma"
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-[#168C0DFF] focus:border-[#168C0DFF]"
              />
            </div>
            <div >
              <label htmlFor="scientificName" className="block text-sm font-medium text-gray-700 mb-1">
                largo
              </label>
              <input
                type="text"
                id="scientificName"
                name="scientificName"
                placeholder="largo"
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-[#168C0DFF] focus:border-[#168C0DFF]"
              />
            </div>
            <div >
              <label htmlFor="scientificName" className="block text-sm font-medium text-gray-700 mb-1">
                ancho
              </label>
              <input
                type="text"
                id="scientificName"
                name="scientificName"
                placeholder="ancho"
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-[#168C0DFF] focus:border-[#168C0DFF]"
              />
            </div>
            <div >
              <label htmlFor="scientificName" className="block text-sm font-medium text-gray-700 mb-1">
                profundo
              </label>
              <input
                type="text"
                id="scientificName"
                name="scientificName"
                placeholder="profundo"
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-[#168C0DFF] focus:border-[#168C0DFF]"
              />
            </div>
            <div >
              <label htmlFor="scientificName" className="block text-sm font-medium text-gray-700 mb-1">
                área
              </label>
              <input
                type="text"
                id="scientificName"
                name="scientificName"
                placeholder="área"
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-[#168C0DFF] focus:border-[#168C0DFF]"
              />
            </div>
            <div >
              <label htmlFor="scientificName" className="block text-sm font-medium text-gray-700 mb-1">
                Volumen
              </label>
              <input
                type="text"
                id="scientificName"
                name="scientificName"
                placeholder="Volumen"
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-[#168C0DFF] focus:border-[#168C0DFF]"
              />
            </div>
            <div >
              <label htmlFor="scientificName" className="block text-sm font-medium text-gray-700 mb-1">
                caracteristicas especificas
              </label>
              <input
                type="text"
                id="scientificName"
                name="scientificName"
                placeholder="caracteristicas especificas"
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-[#168C0DFF] focus:border-[#168C0DFF]"
              />
            </div>
            <div>
              <label htmlFor="especie" className="block text-sm font-medium text-gray-700 mb-1">
                Especies
              </label>
              <FormControl fullWidth disabled={disableSpecies}
              >
                <Select
                  multiple
                  value={formData.species || []}
                  onChange={handleChangeCategory}
                  renderValue={(selectedIds) =>
                    species
                      .filter((option) => selectedIds.includes(option.id))
                      .map((option) => option.common_name)
                      .join(', ')
                  }
                >
                  {species.map((option) => (
                    <MenuItem key={option.id} value={option.id}>
                      <Checkbox checked={formData.species?.includes(option.id)} />
                      <ListItemText primary={option.common_name} />
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>

              <div>
            <div className="col-span-3">
              <button
                type="button"
                onClick={handleAddSubspaceClick}
                disabled={disableSpecies}
                className="px-4 py-2 bg-green-500 text-white rounded-md shadow hover:bg-green-600"
              >
                Añadir Subespacio
              </button>
            </div>
            <div className="mt-4">
              {subspaces.map((subspace, index) => (
                <div key={subspace.id} className="border rounded-md p-4 mb-2">
                  <div className="flex justify-between items-center">
                    <h3 className="font-semibold text-lg">
                      {`Subespacio ${index + 1}`}
                    </h3>
                    <div className="flex items-center gap-2">
                      <button
                        type='button'
                        onClick={() => handleExpandSubspace(subspace.id)}
                        className="text-blue-500"
                      >
                        {expandedSubspace === subspace.id ? "Colapsar" : "Expandir"}
                      </button>
                      <button
                        onClick={() => handleRemoveSubspace(subspace.id)}
                        className="text-red-500"
                      >
                        X
                      </button>
                    </div>
                  </div>
                  {expandedSubspace === subspace.id && (
                    <div className="grid grid-cols-2 gap-4 mt-5">
                      <div className="mb-2">
                        <label className="block text-sm font-medium">
                          Nombre espacio
                        </label>
                        <input
                          type="text"
                          value={subspace.name}
                          onChange={(e) =>
                            handleInputChange(subspace.id, "name", e.target.value)
                          }
                          className="w-full px-3 py-2 border rounded-md"
                        />
                      </div>
                      <div className="mb-2">
                        <label className="block text-sm font-medium">Posición GPS:</label>
                        <input
                          type="text"
                          value={subspace.gpsPosition}
                          onChange={(e) =>
                            handleInputChange(subspace.id, "gpsPosition", e.target.value)
                          }
                          className="w-full px-3 py-2 border rounded-md"
                        />
                      </div>
                      <div className="mb-2">
                        <label className="block text-sm font-medium">Unidad de Dimensión:</label>
                        <input
                          type="text"
                          value={subspace.dimensionUnit}
                          onChange={(e) =>
                            handleInputChange(subspace.id, "dimensionUnit", e.target.value)
                          }
                          className="w-full px-3 py-2 border rounded-md"
                        />
                      </div>
                      <div className="mb-2">
                        <label className="block text-sm font-medium">Forma:</label>
                        <input
                          type="text"
                          value={subspace.shape}
                          onChange={(e) =>
                            handleInputChange(subspace.id, "shape", e.target.value)
                          }
                          className="w-full px-3 py-2 border rounded-md"
                        />
                      </div>
                      <div className="mb-2">
                        <label className="block text-sm font-medium">Longitud:</label>
                        <input
                          type="number"
                          value={subspace.length}
                          onChange={(e) =>
                            handleInputChange(subspace.id, "length", e.target.value)
                          }
                          className="w-full px-3 py-2 border rounded-md"
                        />
                      </div>
                      <div className="mb-2">
                        <label className="block text-sm font-medium">Anchura:</label>
                        <input
                          type="number"
                          value={subspace.width}
                          onChange={(e) =>
                            handleInputChange(subspace.id, "width", e.target.value)
                          }
                          className="w-full px-3 py-2 border rounded-md"
                        />
                      </div>
                      <div className="mb-2">
                        <label className="block text-sm font-medium">Profundidad:</label>
                        <input
                          type="number"
                          value={subspace.depth}
                          onChange={(e) =>
                            handleInputChange(subspace.id, "depth", e.target.value)
                          }
                          className="w-full px-3 py-2 border rounded-md"
                        />
                      </div>
                      <div className="mb-2">
                        <label className="block text-sm font-medium">Área:</label>
                        <input
                          type="number"
                          value={subspace.area}
                          onChange={(e) =>
                            handleInputChange(subspace.id, "area", e.target.value)
                          }
                          className="w-full px-3 py-2 border rounded-md"
                        />
                      </div>
                      <div className="mb-2">
                        <label className="block text-sm font-medium">Volumen:</label>
                        <input
                          type="number"
                          value={subspace.volume}
                          onChange={(e) =>
                            handleInputChange(subspace.id, "volume", e.target.value)
                          }
                          className="w-full px-3 py-2 border rounded-md"
                        />
                      </div>
                      <div className="mb-2">
                        <label className="block text-sm font-medium">Especies:</label>
                        <Select
                          multiple
                          value={subspace.species || []}
                          onChange={(e) =>
                            handleInputChange(subspace.id, "species", Array.from(e.target.selectedOptions, option => option.value))
                          }
                          renderValue={(selected) =>
                            species
                              .filter((option) => selected.includes(option.id))
                              .map((option) => option.common_name)
                              .join(', ')
                          }
                          className="w-full px-3 py-2 border rounded-md"
                        >
                          {species.map((option) => (
                            <MenuItem key={option.id} value={option.id}>
                              <Checkbox checked={subspace.species?.includes(option.id)} />
                              <ListItemText primary={option.common_name} />
                            </MenuItem>
                          ))}
                        </Select>
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>

          </div>

            </div>
              </div>
            )}
            {step === 1 && (
              <div className="grid grid-cols-1 gap-4">
                <div className="flex items-center space-x-4 mt-4">
  <label className="flex items-center space-x-2 cursor-pointer">
    <input
      type="checkbox"
      checked={isYesSelected}
      onChange={handleYesCheckboxChange}
      className="hidden" // Ocultar checkbox original
    />
    <span
      className={`w-5 h-5 rounded-full border-2 flex items-center justify-center ${
        isYesSelected ? "bg-green-500 border-green-500" : "border-gray-400"
      }`}
    >
      {isYesSelected && (
        <span className="w-3 h-3 bg-white rounded-full"></span>
      )}
    </span>
    <span className="text-sm font-medium">Sí</span>
  </label>

  <label className="flex items-center space-x-2 cursor-pointer">
    <input
      type="checkbox"
      checked={!isYesSelected}
      onChange={handleNoCheckboxChange}
      className="hidden" // Ocultar checkbox original
    />
    <span
      className={`w-5 h-5 rounded-full border-2 flex items-center justify-center ${
        !isYesSelected ? "bg-green-500 border-green-500" : "border-gray-400"
      }`}
    >
      {!isYesSelected && (
        <span className="w-3 h-3 bg-white rounded-full"></span>
      )}
    </span>
    <span className="text-sm font-medium">No</span>
  </label>
</div>


      <div className="mb-2">
        <label className="block text-sm font-medium">Tipo de dispotivivo:</label>
        <input
          type="text"
          value={field1}
          onChange={(e) => setField1(e.target.value)}
          className="w-full px-3 py-2 border rounded-md"
          disabled={!isYesSelected} // Deshabilita el campo si "Sí" no está marcado
        />
      </div>

      <div className="mb-2">
        <label className="block text-sm font-medium">Nombre dispotivico</label>
        <input
          type="text"
          value={field2}
          onChange={(e) => setField2(e.target.value)}
          className="w-full px-3 py-2 border rounded-md"
          disabled={!isYesSelected} // Deshabilita el campo si "Sí" no está marcado
        />
      </div>
              </div>
            )}
            {step === 2 && (
              <div className="text-center">
                <h3 className="text-lg font-semibold mb-4">Revisión Final</h3>
                <p className="text-gray-700">Por favor revisa todos los datos antes de finalizar.</p>
              </div>
            )}
          </div>

          {/* Navigation Buttons */}
          <div className="mt-6 flex justify-end space-x-4">
            {step > 0 && (
              <button
                type="button"
                onClick={handlePrevStep}
                className="inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#168C0DFF]"
              >
                Anterior
              </button>
            )}
            {step < 2 && (
              <button
                type="button"
                onClick={handleNextStep}
                className="inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-[#137B09FF] text-white hover:bg-[#168C0DFF] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#168C0DFF]"
              >
                Siguiente
              </button>
            )}
            {step === 2 && (
              <button
                type="button"
                onClick={() => alert('Formulario finalizado')}
                className="inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-[#137B09FF] text-white hover:bg-[#168C0DFF] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#168C0DFF]"
              >
                Finalizar
              </button>
            )}
          </div>
        </div>
      </div>
    </form>
  );
};

export default CrearEspacio;
